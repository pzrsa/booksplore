// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Book {
  id       String @id @default(cuid())
  title    String @unique
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")
  genre    String
  isbn13   String @unique
  asin     String @unique
  saves    Save[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("books")
}

model Author {
  id    String @id @default(cuid())
  name  String @unique
  books Book[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("authors")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  saves         Save[]

  @@map("users")
}

model Save {
  id        String  @id @default(cuid())
  status    Boolean @default(false)
  creatorId String  @map("creator_id")
  creator   User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  bookId    String     @map("book_id")
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("saves")
}
